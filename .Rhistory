aggregated_data <- wl_aggregated_data %>%
group_by(player_id, year, height, hand) %>%
summarize(
total_aces = sum(total_aces),
avg_1stIn = mean(avg_1stIn),
avg_1stWon = mean(avg_1stWon)
)
print(n = 20, aggregated_data[aggregated_data$player_id == 104925, ])
features <- c("tourney_id", "w_ace", "l_ace", "w_1stIn", "l_1stIn", "w_1stWon", "l_1stWon", "winner_ht", "loser_ht", "winner_hand", "loser_hand", "winner_id", "loser_id",
"w_svpt", "l-svpt", "w_df", "l_df")
# Create a new dataframe with selected features
t5 <- all_matches %>% select(features)
features <- c("tourney_id", "w_ace", "l_ace", "w_1stIn", "l_1stIn", "w_1stWon", "l_1stWon", "winner_ht", "loser_ht", "winner_hand", "loser_hand", "winner_id", "loser_id",
"w_svpt", "l_svpt", "w_df", "l_df")
# Create a new dataframe with selected features
t5 <- all_matches %>% select(features)
t5 <- na.omit(t5)
# Convert categorical variables to factors (if needed)
t5$winner_hand <- as.factor(t5$winner_hand)
t5$loser_hand <- as.factor(t5$loser_hand)
# Extract the year from the tourney_id
t5$year <- as.numeric(substring(t5$tourney_id, 1, regexpr("-", t5$tourney_id)-1))
# Aggregate features by player and year, considering both winner and loser information
winner_aggregated_data <- t5 %>%
group_by(player_id = winner_id, year, winner_ht, winner_hand) %>%
summarize(
total_aces = sum(w_ace),
avg_1stIn = mean(w_1stIn),
avg_1stWon = mean(w_1stWon),
svpt = mean(w_svpt),
df = sum(w_df)
)
loser_aggregated_data <- t5 %>%
group_by(player_id = loser_id, year, loser_ht, loser_hand) %>%
summarize(
total_aces = sum(l_ace),
avg_1stIn = mean(l_1stIn),
avg_1stWon = mean(l_1stWon),
svpt = mean(l_svpt),
df = sum(l_df)
)
colnames(winner_aggregated_data)[colnames(winner_aggregated_data) == "winner_ht"] <- "height"
colnames(winner_aggregated_data)[colnames(winner_aggregated_data) == "winner_hand"] <- "hand"
colnames(loser_aggregated_data)[colnames(loser_aggregated_data) == "loser_ht"] <- "height"
colnames(loser_aggregated_data)[colnames(loser_aggregated_data) == "loser_hand"] <- "hand"
print(winner_aggregated_data)
print(loser_aggregated_data)
wl_aggregated_data <- rbind(winner_aggregated_data, loser_aggregated_data)
print(n=40, wl_aggregated_data[wl_aggregated_data$player_id == 104925, ])
aggregated_data <- wl_aggregated_data %>%
group_by(player_id, year, height, hand) %>%
summarize(
total_aces = sum(total_aces),
avg_1stIn = mean(avg_1stIn),
avg_1stWon = mean(avg_1stWon),
svpt = mean(svpt),
df = sum(df)
)
print(n = 20, aggregated_data[aggregated_data$player_id == 104925, ])
features <- c("tourney_id", "w_ace", "l_ace", "w_1stIn", "l_1stIn", "w_1stWon", "l_1stWon", "winner_ht", "loser_ht", "winner_hand", "loser_hand", "winner_id", "loser_id",
"w_svpt", "l_svpt", "w_df", "l_df")
# Create a new dataframe with selected features
t5 <- all_matches %>% select(features)
t5 <- na.omit(t5)
# Convert categorical variables to factors (if needed)
t5$winner_hand <- as.factor(t5$winner_hand)
t5$loser_hand <- as.factor(t5$loser_hand)
# Extract the year from the tourney_id
t5$year <- as.numeric(substring(t5$tourney_id, 1, regexpr("-", t5$tourney_id)-1))
# Aggregate features by player and year, considering both winner and loser information
winner_aggregated_data <- t5 %>%
group_by(player_id = winner_id, year, winner_ht, winner_hand) %>%
summarize(
total_aces = sum(w_ace),
avg_1stIn = mean(w_1stIn),
avg_1stWon = mean(w_1stWon),
svpt = mean(w_svpt),
df = sum(w_df)
)
loser_aggregated_data <- t5 %>%
group_by(player_id = loser_id, year, loser_ht, loser_hand) %>%
summarize(
total_aces = sum(l_ace),
avg_1stIn = mean(l_1stIn),
avg_1stWon = mean(l_1stWon),
svpt = mean(l_svpt),
df = sum(l_df)
)
colnames(winner_aggregated_data)[colnames(winner_aggregated_data) == "winner_ht"] <- "height"
colnames(winner_aggregated_data)[colnames(winner_aggregated_data) == "winner_hand"] <- "hand"
colnames(loser_aggregated_data)[colnames(loser_aggregated_data) == "loser_ht"] <- "height"
colnames(loser_aggregated_data)[colnames(loser_aggregated_data) == "loser_hand"] <- "hand"
print(winner_aggregated_data)
print(loser_aggregated_data)
wl_aggregated_data <- rbind(winner_aggregated_data, loser_aggregated_data)
print(n=40, wl_aggregated_data[wl_aggregated_data$player_id == 104925, ])
aggregated_data <- wl_aggregated_data %>%
group_by(player_id, year, height, hand) %>%
summarize(
total_aces = sum(total_aces),
avg_1stIn = mean(avg_1stIn),
avg_1stWon = mean(avg_1stWon),
svpt = mean(svpt),
df = sum(df)
)
djokovic <- aggregated_data[aggregated_data$player_id == 104925, ]
print(n = 20, djokovic)
djokovic$aces_in_following_year <- lag(djokovic$total_aces)
print(n = 20, djokovic)
features <- c("tourney_id", "w_ace", "l_ace", "w_1stIn", "l_1stIn", "w_1stWon", "l_1stWon", "winner_ht", "loser_ht", "winner_hand", "loser_hand", "winner_id", "loser_id",
"w_svpt", "l_svpt", "w_df", "l_df")
# Create a new dataframe with selected features
t5 <- all_matches %>% select(features)
t5 <- na.omit(t5)
# Convert categorical variables to factors (if needed)
t5$winner_hand <- as.factor(t5$winner_hand)
t5$loser_hand <- as.factor(t5$loser_hand)
# Extract the year from the tourney_id
t5$year <- as.numeric(substring(t5$tourney_id, 1, regexpr("-", t5$tourney_id)-1))
# Aggregate features by player and year, considering both winner and loser information
winner_aggregated_data <- t5 %>%
group_by(player_id = winner_id, year, winner_ht, winner_hand) %>%
summarize(
total_aces = sum(w_ace),
avg_1stIn = mean(w_1stIn),
avg_1stWon = mean(w_1stWon),
svpt = mean(w_svpt),
df = sum(w_df)
)
loser_aggregated_data <- t5 %>%
group_by(player_id = loser_id, year, loser_ht, loser_hand) %>%
summarize(
total_aces = sum(l_ace),
avg_1stIn = mean(l_1stIn),
avg_1stWon = mean(l_1stWon),
svpt = mean(l_svpt),
df = sum(l_df)
)
colnames(winner_aggregated_data)[colnames(winner_aggregated_data) == "winner_ht"] <- "height"
colnames(winner_aggregated_data)[colnames(winner_aggregated_data) == "winner_hand"] <- "hand"
colnames(loser_aggregated_data)[colnames(loser_aggregated_data) == "loser_ht"] <- "height"
colnames(loser_aggregated_data)[colnames(loser_aggregated_data) == "loser_hand"] <- "hand"
print(winner_aggregated_data)
print(loser_aggregated_data)
wl_aggregated_data <- rbind(winner_aggregated_data, loser_aggregated_data)
print(n=40, wl_aggregated_data[wl_aggregated_data$player_id == 104925, ])
aggregated_data <- wl_aggregated_data %>%
group_by(player_id, year, height, hand) %>%
summarize(
total_aces = sum(total_aces),
avg_1stIn = mean(avg_1stIn),
avg_1stWon = mean(avg_1stWon),
svpt = mean(svpt),
df = sum(df)
)
djokovic <- aggregated_data[aggregated_data$player_id == 104925, ]
print(n = 20, djokovic)
djokovic$aces_in_following_year <- lead(djokovic$total_aces)
print(n = 20, djokovic)
features <- c("tourney_id", "w_ace", "l_ace", "w_1stIn", "l_1stIn", "w_1stWon", "l_1stWon", "winner_ht", "loser_ht", "winner_hand", "loser_hand", "winner_id", "loser_id",
"w_svpt", "l_svpt", "w_df", "l_df")
# Create a new dataframe with selected features
t5 <- all_matches %>% select(features)
t5 <- na.omit(t5)
# Convert categorical variables to factors (if needed)
t5$winner_hand <- as.factor(t5$winner_hand)
t5$loser_hand <- as.factor(t5$loser_hand)
# Extract the year from the tourney_id
t5$year <- as.numeric(substring(t5$tourney_id, 1, regexpr("-", t5$tourney_id)-1))
# Aggregate features by player and year, considering both winner and loser information
winner_aggregated_data <- t5 %>%
group_by(player_id = winner_id, year, winner_ht, winner_hand) %>%
summarize(
total_aces = sum(w_ace),
avg_1stIn = mean(w_1stIn),
avg_1stWon = mean(w_1stWon),
svpt = mean(w_svpt),
df = sum(w_df)
)
loser_aggregated_data <- t5 %>%
group_by(player_id = loser_id, year, loser_ht, loser_hand) %>%
summarize(
total_aces = sum(l_ace),
avg_1stIn = mean(l_1stIn),
avg_1stWon = mean(l_1stWon),
svpt = mean(l_svpt),
df = sum(l_df)
)
colnames(winner_aggregated_data)[colnames(winner_aggregated_data) == "winner_ht"] <- "height"
colnames(winner_aggregated_data)[colnames(winner_aggregated_data) == "winner_hand"] <- "hand"
colnames(loser_aggregated_data)[colnames(loser_aggregated_data) == "loser_ht"] <- "height"
colnames(loser_aggregated_data)[colnames(loser_aggregated_data) == "loser_hand"] <- "hand"
print(winner_aggregated_data)
print(loser_aggregated_data)
wl_aggregated_data <- rbind(winner_aggregated_data, loser_aggregated_data)
print(n=40, wl_aggregated_data[wl_aggregated_data$player_id == 104925, ])
aggregated_data <- wl_aggregated_data %>%
group_by(player_id, year, height, hand) %>%
summarize(
total_aces = sum(total_aces),
avg_1stIn = mean(avg_1stIn),
avg_1stWon = mean(avg_1stWon),
svpt = mean(svpt),
df = sum(df)
)
djokovic <- aggregated_data[aggregated_data$player_id == 104925, ]
print(n = 20, djokovic)
djokovic$aces_in_following_year <- lead(djokovic$total_aces)
print(n = 20, djokovic)
djokovic_2023 <- tail(djokovic, 1)
djokovic <- head(djokovic, -1)
model <- lm(aces_in_following_year ~ avg_1stIn + avg_1stWon + svpt + df + total_aces, data = djokovic)
# TODO remove hand and height
# Make predictions on the entire dataset
predictions <- predict(model, newdata = djokovic_2023)
print(predictions)
# Task 5.3
features <- c("tourney_id", "w_ace", "l_ace", "w_1stIn", "l_1stIn", "w_1stWon", "l_1stWon", "winner_ht", "loser_ht", "winner_hand", "loser_hand", "winner_id", "loser_id",
"w_svpt", "l_svpt", "w_df", "l_df")
# Create a new dataframe with selected features
t5 <- all_matches %>% select(features)
t5 <- na.omit(t5)
# Convert categorical variables to factors (if needed)
t5$winner_hand <- as.factor(t5$winner_hand)
t5$loser_hand <- as.factor(t5$loser_hand)
# Extract the year from the tourney_id
t5$year <- as.numeric(substring(t5$tourney_id, 1, regexpr("-", t5$tourney_id)-1))
# Aggregate features by player and year, considering both winner and loser information
winner_aggregated_data <- t5 %>%
group_by(player_id = winner_id, year, winner_ht, winner_hand) %>%
summarize(
total_aces = sum(w_ace),
avg_1stIn = mean(w_1stIn),
avg_1stWon = mean(w_1stWon),
svpt = mean(w_svpt),
df = sum(w_df)
)
loser_aggregated_data <- t5 %>%
group_by(player_id = loser_id, year, loser_ht, loser_hand) %>%
summarize(
total_aces = sum(l_ace),
avg_1stIn = mean(l_1stIn),
avg_1stWon = mean(l_1stWon),
svpt = mean(l_svpt),
df = sum(l_df)
)
colnames(winner_aggregated_data)[colnames(winner_aggregated_data) == "winner_ht"] <- "height"
colnames(winner_aggregated_data)[colnames(winner_aggregated_data) == "winner_hand"] <- "hand"
colnames(loser_aggregated_data)[colnames(loser_aggregated_data) == "loser_ht"] <- "height"
colnames(loser_aggregated_data)[colnames(loser_aggregated_data) == "loser_hand"] <- "hand"
print(winner_aggregated_data)
print(loser_aggregated_data)
wl_aggregated_data <- rbind(winner_aggregated_data, loser_aggregated_data)
print(n=40, wl_aggregated_data[wl_aggregated_data$player_id == 104925, ])
aggregated_data <- wl_aggregated_data %>%
group_by(player_id, year, height, hand) %>%
summarize(
total_aces = sum(total_aces),
avg_1stIn = mean(avg_1stIn),
avg_1stWon = mean(avg_1stWon),
svpt = mean(svpt),
df = sum(df)
)
djokovic <- aggregated_data[aggregated_data$player_id == 104925, ]
print(n = 20, djokovic)
djokovic$aces_in_following_year <- lead(djokovic$total_aces)
print(n = 20, djokovic)
djokovic_2023 <- tail(djokovic, 2)
djokovic <- head(djokovic, -2)
model <- lm(aces_in_following_year ~ avg_1stIn + avg_1stWon + svpt + df + total_aces, data = djokovic)
# TODO remove hand and height
# Make predictions on the entire dataset
predictions <- predict(model, newdata = djokovic_2023)
print(predictions)
features <- c("tourney_id", "w_ace", "l_ace", "w_1stIn", "l_1stIn", "w_1stWon", "l_1stWon", "winner_ht", "loser_ht", "winner_hand", "loser_hand", "winner_id", "loser_id",
"w_svpt", "l_svpt", "w_df", "l_df")
# Create a new dataframe with selected features
t5 <- all_matches %>% select(features)
t5 <- na.omit(t5)
# Convert categorical variables to factors (if needed)
t5$winner_hand <- as.factor(t5$winner_hand)
t5$loser_hand <- as.factor(t5$loser_hand)
# Extract the year from the tourney_id
t5$year <- as.numeric(substring(t5$tourney_id, 1, regexpr("-", t5$tourney_id)-1))
# Aggregate features by player and year, considering both winner and loser information
winner_aggregated_data <- t5 %>%
group_by(player_id = winner_id, year, winner_ht, winner_hand) %>%
summarize(
total_aces = sum(w_ace),
avg_1stIn = mean(w_1stIn),
avg_1stWon = mean(w_1stWon),
svpt = mean(w_svpt),
df = sum(w_df)
)
loser_aggregated_data <- t5 %>%
group_by(player_id = loser_id, year, loser_ht, loser_hand) %>%
summarize(
total_aces = sum(l_ace),
avg_1stIn = mean(l_1stIn),
avg_1stWon = mean(l_1stWon),
svpt = mean(l_svpt),
df = sum(l_df)
)
colnames(winner_aggregated_data)[colnames(winner_aggregated_data) == "winner_ht"] <- "height"
colnames(winner_aggregated_data)[colnames(winner_aggregated_data) == "winner_hand"] <- "hand"
colnames(loser_aggregated_data)[colnames(loser_aggregated_data) == "loser_ht"] <- "height"
colnames(loser_aggregated_data)[colnames(loser_aggregated_data) == "loser_hand"] <- "hand"
print(winner_aggregated_data)
print(loser_aggregated_data)
wl_aggregated_data <- rbind(winner_aggregated_data, loser_aggregated_data)
print(n=40, wl_aggregated_data[wl_aggregated_data$player_id == 104925, ])
aggregated_data <- wl_aggregated_data %>%
group_by(player_id, year, height, hand) %>%
summarize(
total_aces = sum(total_aces),
avg_1stIn = mean(avg_1stIn),
avg_1stWon = mean(avg_1stWon),
svpt = mean(svpt),
df = sum(df)
)
djokovic <- aggregated_data[aggregated_data$player_id == 104925, ]
print(n = 20, djokovic)
djokovic$aces_in_following_year <- lead(djokovic$total_aces)
print(n = 20, djokovic)
djokovic_2023 <- tail(djokovic, 4)
djokovic <- head(djokovic, -3)
model <- lm(aces_in_following_year ~ avg_1stIn + avg_1stWon + svpt + df + total_aces, data = djokovic)
# TODO remove hand and height
# Make predictions on the entire dataset
predictions <- predict(model, newdata = djokovic_2023)
print(predictions)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
knitr::opts_chunk$set(echo = TRUE)
# install.packages("dplyr")
# install.packages("lubridate")
# install.packages("ggplot2")
# install.packages("caret")
library(dplyr)
library(lubridate)
library(ggplot2)
library(caret)
all_matches <- data.frame()
for (year in 1991:2023) {
file_name <- paste0("dataset/atp_matches_", year, ".csv")
matches_year <- read.csv(file_name, stringsAsFactors = FALSE)
all_matches <- rbind(all_matches, matches_year)
}
print(str(all_matches))
print(names(all_matches))
print(summary(all_matches))
all_matches <- data.frame()
for (year in 1991:2023) {
file_name <- paste0("dataset/atp_matches_", year, ".csv")
matches_year <- read.csv(file_name, stringsAsFactors = FALSE)
all_matches <- rbind(all_matches, matches_year)
}
print(head(all_matches))
print(names(all_matches))
print(summary(all_matches))
knitr::opts_chunk$set(echo = TRUE)
# install.packages("dplyr")
# install.packages("lubridate")
# install.packages("ggplot2")
# install.packages("caret")
library(dplyr)
library(lubridate)
library(ggplot2)
library(caret)
all_matches <- data.frame()
for (year in 1991:2023) {
file_name <- paste0("dataset/atp_matches_", year, ".csv")
matches_year <- read.csv(file_name, stringsAsFactors = FALSE)
all_matches <- rbind(all_matches, matches_year)
}
print(head(all_matches))
print(names(all_matches))
print(summary(all_matches))
t1 <- all_matches %>%
filter(!is.na(surface) & !is.na(tourney_date) & surface != "")
t1 <- select(t1, surface, tourney_date)
print(t1)
t1$tourney_date <- as.Date(as.character(t1$tourney_date), format = "%Y%m%d", origin = "1970-01-01")
t1$month <- month(t1$tourney_date)
t1$season <- case_when(
t1$month %in% c(3, 4, 5) ~ "Spring",
t1$month %in% c(6, 7, 8) ~ "Summer",
t1$month %in% c(9, 10, 11) ~ "Fall",
t1$month %in% c(12, 1, 2) ~ "Winter",
TRUE ~ "Unknown"
)
surface_counts <- table(t1$season, t1$surface)
surface_counts_df <- as.data.frame(surface_counts)
names(surface_counts_df) <- c("Season", "Surface", "Frequency")
ggplot(t1, aes(x = season, fill = factor(season))) +
geom_bar() +
facet_wrap(~ surface, scales = "free") +
labs(title = "Season Frequencies for Each Surface", x = "Season", y = "Frequency") +
theme_minimal()
ggplot(surface_counts_df, aes(x = Surface, y = Frequency, fill = Surface)) +
geom_bar(stat = "identity", position = "dodge") +
facet_wrap(~Season, scales = "free") +
labs(title = "Surface Frequencies for Each Season", x = "Surface", y = "Frequency") +
theme_minimal()
knitr::opts_chunk$set(echo = TRUE)
# install.packages("dplyr")
# install.packages("lubridate")
# install.packages("ggplot2")
# install.packages("caret")
library(dplyr)
library(lubridate)
library(ggplot2)
library(caret)
all_matches <- data.frame()
for (year in 1991:2023) {
file_name <- paste0("dataset/atp_matches_", year, ".csv")
matches_year <- read.csv(file_name, stringsAsFactors = FALSE)
all_matches <- rbind(all_matches, matches_year)
}
print(head(all_matches))
print(names(all_matches))
print(summary(all_matches))
knitr::opts_chunk$set(echo = TRUE)
# install.packages("dplyr")
# install.packages("lubridate")
# install.packages("ggplot2")
# install.packages("caret")
library(dplyr)
library(lubridate)
library(ggplot2)
library(caret)
all_matches <- data.frame()
for (year in 1991:2023) {
file_name <- paste0("dataset/atp_matches_", year, ".csv")
matches_year <- read.csv(file_name, stringsAsFactors = FALSE)
all_matches <- rbind(all_matches, matches_year)
}
print(head(all_matches))
print(names(all_matches))
print(summary(all_matches))
t1 <- all_matches %>%
filter(!is.na(surface) & !is.na(tourney_date) & surface != "")
t1 <- select(t1, surface, tourney_date)
t1$tourney_date <- as.Date(as.character(t1$tourney_date), format = "%Y%m%d", origin = "1970-01-01")
t1$month <- month(t1$tourney_date)
t1$season <- case_when(
t1$month %in% c(3, 4, 5) ~ "Spring",
t1$month %in% c(6, 7, 8) ~ "Summer",
t1$month %in% c(9, 10, 11) ~ "Fall",
t1$month %in% c(12, 1, 2) ~ "Winter",
TRUE ~ "Unknown"
)
surface_counts <- table(t1$season, t1$surface)
surface_counts_df <- as.data.frame(surface_counts)
names(surface_counts_df) <- c("Season", "Surface", "Frequency")
ggplot(t1, aes(x = season, fill = factor(season))) +
geom_bar() +
facet_wrap(~ surface, scales = "free") +
labs(title = "Season Frequencies for Each Surface", x = "Season", y = "Frequency") +
theme_minimal()
ggplot(surface_counts_df, aes(x = Surface, y = Frequency, fill = Surface)) +
geom_bar(stat = "identity", position = "dodge") +
facet_wrap(~Season, scales = "free") +
labs(title = "Surface Frequencies for Each Season", x = "Surface", y = "Frequency") +
theme_minimal()
knitr::opts_chunk$set(echo = TRUE)
t3
t3$aces[t3$surface=='Hard']
lillie.test(t3$aces[t3$surface=='Hard'])
require(nortest)
lillie.test(t3$aces[t3$surface=='Hard'])
t3$aces[t3$surface=='Hard']
t3$aces
t3$aces
t3
t3$surface
lillie.test(t3$aces[t3$surface=='Hard'])
lillie.test(t3$aces[t3$surface=='Carpet'])
lillie.test(t3$aces[t3$surface=='Clay'])
lillie.test(t3$aces[t3$surface=='Grass'])
bartlett.test(t3$aces ~ t3$surface)
var((t3$aces[t3$surface=='Hard']))
var((t3$aces[t3$surface=='Carpet']))
var((t3$aces[t3$surface=='Clay']))
aov_res <- aov(aces~surface, data=t3)
var((t3$aces[t3$surface=='Grass']))
boxplot(t3$aces ~ t3$surface)
hist(t3$aces[t3$surface=='Hard'])
hist(t3$aces[t3$surface=='Carpet'])
hist(t3$aces[t3$surface=='Clay'])
hist(t3$aces[t3$surface=='Grass'])
boxplot(t3$aces ~ t3$surface)
qqnorm(t3$aces[t3$surface=='Hard'])
hist(t3$aces[t3$surface=='Hard'])
hist(log(t3$aces[t3$surface=='Hard']))
hist(t3$aces[t3$surface=='Carpet'])
hist(log(t3$aces[t3$surface=='Carpet']))
hist(log(t3$aces[t3$surface=='Clay']))
hist(log(t3$aces[t3$surface=='Grass']))
bartlett.test(t3$aces ~ t3$surface)
print(lillie.test(log(t3$aces[t3$surface=='Hard'])))
print(lillie.test(log(t3$aces[t3$surface=='Hard'])))
print(lillie.test(t3$aces[t3$surface=='Hard']))
hist(log(t3$aces[t3$surface=='Clay']))
hist(log(t3$aces[t3$surface=='Grass']))
qqnorm(t3$aces[t3$surface=='Hard'])
qqline(t3$aces[t3$surface=='Hard'], col = "blue", lwd = 2)
qqnorm(t3$aces[t3$surface=='Hard'])
qqline(t3$aces[t3$surface=='Hard'], col = "blue", lwd = 2)
qqnorm(log(t3$aces[t3$surface=='Hard']))
kruskal.test(aces~surface, data=t3)
